#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import os
from pathlib import Path

def debug_final_counters():
    """–û—Ç–ª–∞–¥–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω—É–ª–µ–≤—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    out_dir = Path("/Users/orionflash/Desktop/MyProject/SPOD_PROM/OUT")
    excel_files = list(out_dir.glob("SPOD_ALL_IN_ONE_*.xlsx"))
    latest_file = max(excel_files, key=os.path.getctime)
    
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞ —Ñ–∞–π–ª–∞: {latest_file.name}")
    
    # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
    sheets = {
        'SUMMARY': pd.read_excel(latest_file, sheet_name='SUMMARY'),
        'INDICATOR': pd.read_excel(latest_file, sheet_name='INDICATOR'),
        'REPORT': pd.read_excel(latest_file, sheet_name='REPORT'),
        'TOURNAMENT-SCHEDULE': pd.read_excel(latest_file, sheet_name='TOURNAMENT-SCHEDULE')
    }
    
    print(f"üìä SUMMARY: {len(sheets['SUMMARY'])} —Å—Ç—Ä–æ–∫")
    print(f"üìä INDICATOR: {len(sheets['INDICATOR'])} —Å—Ç—Ä–æ–∫")
    print(f"üìä REPORT: {len(sheets['REPORT'])} —Å—Ç—Ä–æ–∫")
    print(f"üìä TOURNAMENT-SCHEDULE: {len(sheets['TOURNAMENT-SCHEDULE'])} —Å—Ç—Ä–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
    problematic_counters = [
        'INDICATOR=>COUNT_CONTEST_CODE',
        'REPORT=>COUNT_CONTEST_CODE', 
        'REPORT=>COUNT_TOURNAMENT_CODE',
        'TOURNAMENT-SCHEDULE=>COUNT_TOURNAMENT_CODE'
    ]
    
    for counter in problematic_counters:
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å—á–µ—Ç—á–∏–∫–∞: {counter}")
        
        if counter in sheets['SUMMARY'].columns:
            values = sheets['SUMMARY'][counter]
            non_zero = (values != 0).sum()
            print(f"  üìà –ù–µ–Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {non_zero} –∏–∑ {len(values)}")
            
            if non_zero > 0:
                print(f"  üìä –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {values[values != 0].head().tolist()}")
            else:
                print(f"  ‚ùå –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã 0")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                if counter == 'INDICATOR=>COUNT_CONTEST_CODE':
                    print(f"  üîç –ê–Ω–∞–ª–∏–∑ INDICATOR:")
                    print(f"    - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CONTEST_CODE –≤ INDICATOR: {sheets['INDICATOR']['CONTEST_CODE'].nunique()}")
                    print(f"    - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CONTEST_CODE –≤ SUMMARY: {sheets['SUMMARY']['CONTEST_CODE'].nunique()}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                    indicator_codes = set(sheets['INDICATOR']['CONTEST_CODE'].dropna())
                    summary_codes = set(sheets['SUMMARY']['CONTEST_CODE'].dropna())
                    intersection = indicator_codes.intersection(summary_codes)
                    print(f"    - –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π: {len(intersection)}")
                    
                elif counter == 'REPORT=>COUNT_CONTEST_CODE':
                    print(f"  üîç –ê–Ω–∞–ª–∏–∑ REPORT –ø–æ CONTEST_CODE:")
                    print(f"    - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CONTEST_CODE –≤ REPORT: {sheets['REPORT']['CONTEST_CODE'].nunique()}")
                    print(f"    - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CONTEST_CODE –≤ SUMMARY: {sheets['SUMMARY']['CONTEST_CODE'].nunique()}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                    report_codes = set(sheets['REPORT']['CONTEST_CODE'].dropna())
                    summary_codes = set(sheets['SUMMARY']['CONTEST_CODE'].dropna())
                    intersection = report_codes.intersection(summary_codes)
                    print(f"    - –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π: {len(intersection)}")
                    
                elif counter == 'REPORT=>COUNT_TOURNAMENT_CODE':
                    print(f"  üîç –ê–Ω–∞–ª–∏–∑ REPORT –ø–æ TOURNAMENT_CODE:")
                    print(f"    - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö TOURNAMENT_CODE –≤ REPORT: {sheets['REPORT']['TOURNAMENT_CODE'].nunique()}")
                    print(f"    - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö TOURNAMENT_CODE –≤ SUMMARY: {sheets['SUMMARY']['TOURNAMENT_CODE'].nunique()}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                    report_codes = set(sheets['REPORT']['TOURNAMENT_CODE'].dropna())
                    summary_codes = set(sheets['SUMMARY']['TOURNAMENT_CODE'].dropna())
                    intersection = report_codes.intersection(summary_codes)
                    print(f"    - –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π: {len(intersection)}")
                    
                elif counter == 'TOURNAMENT-SCHEDULE=>COUNT_TOURNAMENT_CODE':
                    print(f"  üîç –ê–Ω–∞–ª–∏–∑ TOURNAMENT-SCHEDULE –ø–æ TOURNAMENT_CODE:")
                    print(f"    - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö TOURNAMENT_CODE –≤ TOURNAMENT-SCHEDULE: {sheets['TOURNAMENT-SCHEDULE']['TOURNAMENT_CODE'].nunique()}")
                    print(f"    - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö TOURNAMENT_CODE –≤ SUMMARY: {sheets['SUMMARY']['TOURNAMENT_CODE'].nunique()}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                    tournament_codes = set(sheets['TOURNAMENT-SCHEDULE']['TOURNAMENT_CODE'].dropna())
                    summary_codes = set(sheets['SUMMARY']['TOURNAMENT_CODE'].dropna())
                    intersection = tournament_codes.intersection(summary_codes)
                    print(f"    - –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π: {len(intersection)}")
        else:
            print(f"  ‚ùå –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ SUMMARY")

if __name__ == "__main__":
    debug_final_counters()
