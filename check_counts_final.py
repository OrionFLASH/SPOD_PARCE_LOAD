#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import os
from pathlib import Path

def check_count_columns():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ SUMMARY –ª–∏—Å—Ç–µ"""
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    out_dir = Path("/Users/orionflash/Desktop/MyProject/SPOD_PROM/OUT")
    excel_files = list(out_dir.glob("SPOD_ALL_IN_ONE_*.xlsx"))
    
    if not excel_files:
        print("‚ùå –§–∞–π–ª—ã Excel –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ OUT")
        return
    
    latest_file = max(excel_files, key=os.path.getctime)
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {latest_file.name}")
    
    try:
        # –ß–∏—Ç–∞–µ–º SUMMARY –ª–∏—Å—Ç
        df = pd.read_excel(latest_file, sheet_name='SUMMARY')
        print(f"üìã SUMMARY –ª–∏—Å—Ç: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤
        count_columns = [col for col in df.columns if '=>COUNT_' in col]
        print(f"\nüî¢ –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ —Å—á–µ—Ç—á–∏–∫–æ–≤: {len(count_columns)}")
        
        if not count_columns:
            print("‚ùå –ö–æ–ª–æ–Ω–∫–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç—á–∏–∫–∞–º:")
        print("=" * 80)
        
        for col in sorted(count_columns):
            values = df[col].dropna()
            non_zero = (values > 0).sum()
            zero_count = (values == 0).sum()
            total = len(values)
            
            if total > 0:
                non_zero_pct = (non_zero / total) * 100
                print(f"{col:50} | –í—Å–µ–≥–æ: {total:4d} | –ù–µ–Ω—É–ª–µ–≤—ã—Ö: {non_zero:4d} ({non_zero_pct:5.1f}%) | –ù—É–ª–µ–≤—ã—Ö: {zero_count:4d}")
            else:
                print(f"{col:50} | –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        print("\nüéØ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å—á–µ—Ç—á–∏–∫—É:")
        print("=" * 80)
        
        for col in sorted(count_columns):
            values = df[col].dropna()
            if len(values) > 0:
                print(f"\n{col}:")
                print(f"  –ú–∏–Ω–∏–º—É–º: {values.min()}")
                print(f"  –ú–∞–∫—Å–∏–º—É–º: {values.max()}")
                print(f"  –°—Ä–µ–¥–Ω–µ–µ: {values.mean():.2f}")
                print(f"  –ú–µ–¥–∏–∞–Ω–∞: {values.median():.2f}")
                print(f"  –ù–µ–Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {(values > 0).sum()}")
                print(f"  –ù—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {(values == 0).sum()}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                non_zero_values = values[values > 0]
                if len(non_zero_values) > 0:
                    print(f"  –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {sorted(non_zero_values.unique())[:10]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
        expected_counters = [
            'CONTEST-DATA=>COUNT_CONTEST_CODE',
            'GROUP=>COUNT_CONTEST_CODE', 
            'GROUP=>COUNT_CONTEST_CODE',
            'INDICATOR=>COUNT_CONTEST_CODE',
            'REWARD=>COUNT_REWARD_CODE',
            'REWARD-LINK=>COUNT_CONTEST_CODE',
            'TOURNAMENT-SCHEDULE=>COUNT_CONTEST_CODE',
            'TOURNAMENT-SCHEDULE=>COUNT_TOURNAMENT_CODE',
            'TOURNAMENT-SCHEDULE=>COUNT_CONTEST_CODE'
        ]
        
        print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤:")
        print("=" * 80)
        
        for expected in expected_counters:
            if expected in df.columns:
                non_zero = (df[expected] > 0).sum()
                total = len(df[expected].dropna())
                status = "‚úÖ" if non_zero > 0 else "‚ùå"
                print(f"{status} {expected:50} | –ù–µ–Ω—É–ª–µ–≤—ã—Ö: {non_zero:4d} –∏–∑ {total:4d}")
            else:
                print(f"‚ùå {expected:50} | –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    check_count_columns()
