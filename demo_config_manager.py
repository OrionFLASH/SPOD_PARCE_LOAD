#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è SPOD Configuration Manager
"""

import json
import os
from spod_config_manager import SPODConfigManager

def demo_config_manager():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è SPOD Configuration Manager")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = SPODConfigManager()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = manager.get_config()
    
    print("üìä –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  ‚Ä¢ –í—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(config['input_files'])}")
    print(f"  ‚Ä¢ –ü—Ä–∞–≤–∏–ª –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {len(config['merge_fields'])}")
    print(f"  ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª: {len(config['merge_fields_advanced'])}")
    print(f"  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ –¥—É–±–ª–µ–π: {len(config['check_duplicates'])}")
    print(f"  ‚Ä¢ –¶–≤–µ—Ç–æ–≤—ã—Ö —Å—Ö–µ–º: {len(config['color_scheme'])}")
    print(f"  ‚Ä¢ JSON –∫–æ–ª–æ–Ω–æ–∫: {len(config['json_columns'])}")
    print(f"  ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏–π –ø–æ–ª–µ–π: {len(config['field_length_validations'])}")
    
    print("\nüîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã:")
    sheets = manager.get_available_sheets()
    for sheet in sheets:
        print(f"  ‚Ä¢ {sheet}")
    
    print("\nüìù –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:")
    if config['input_files']:
        example_file = config['input_files'][0]
        print(f"  ‚Ä¢ –§–∞–π–ª: {example_file.get('file', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"  ‚Ä¢ –õ–∏—Å—Ç: {example_file.get('sheet', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"  ‚Ä¢ –®–∏—Ä–∏–Ω–∞: {example_file.get('max_col_width', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        print(f"  ‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ: {example_file.get('freeze', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    
    print("\nüîó –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:")
    if config['merge_fields']:
        example_merge = config['merge_fields'][0]
        print(f"  ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {example_merge.get('sheet_src', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"  ‚Ä¢ –¶–µ–ª—å: {example_merge.get('sheet_dst', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"  ‚Ä¢ –ö–ª—é—á–∏: {example_merge.get('src_key', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')} ‚Üí {example_merge.get('dst_key', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}")
        print(f"  ‚Ä¢ –ö–æ–ª–æ–Ω–∫–∏: {example_merge.get('column', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}")
        print(f"  ‚Ä¢ –†–µ–∂–∏–º: {example_merge.get('mode', 'value')}")
    
    print("\nüé® –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    validators = manager.validators
    for key, values in validators.items():
        print(f"  ‚Ä¢ {key}: {values}")
    
    print("\nüì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    try:
        config_code = manager.export_config()
        print(f"  ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(config_code)} —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–¥–∞")
        print(f"  ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç {config_code.count('INPUT_FILES')} —Å–µ–∫—Ü–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("   python run_config_manager.py")
    print("   –∏–ª–∏")
    print("   python spod_config_manager.py")

if __name__ == "__main__":
    demo_config_manager()
